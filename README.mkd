# Documentación Técnica - version2.js

El script `version2.js` es una herramienta de automatización que interactúa con la API de Okto Shop y la API de Vtex para obtener información sobre productos y su disponibilidad en stock, respectivamente. Luego, esta información se guarda en archivos JSON y Excel para su posterior análisis.

## Requisitos
- Node.js instalado en el entorno de ejecución.
- Dependencias npm: axios, fs, XLSX.

## Funciones Principales

### `getProductsIndex()`
- **Descripción:** Obtiene una lista de IDs de productos desde la API de Okto Shop.
- **Parámetros:** Ninguno.
- **Retorno:** Una lista de IDs de productos.

### `getProductDataByIndex(productId)`
- **Descripción:** Obtiene los datos de un producto específico a través de su ID desde la API de Okto Shop.
- **Parámetros:** `productId` - ID del producto.
- **Retorno:** Los datos del producto en formato JSON.

### `getProductInfo()`
- **Descripción:** Obtiene información detallada de todos los productos disponibles en Okto Shop.
- **Parámetros:** Ninguno.
- **Retorno:** Una lista de objetos JSON con la información de los productos.

### `productVtexByEanListOkToShop(productList)`
- **Descripción:** Obtiene información adicional de los productos desde la API de Vtex utilizando el código EAN.
- **Parámetros:** `productList` - Lista de productos obtenida de Okto Shop.
- **Retorno:** Una lista de objetos JSON con la información de los productos enriquecida con datos de Vtex.

### `saveToExcel(productInfo, stockList)`
- **Descripción:** Guarda la información de productos y stock en un archivo Excel.
- **Parámetros:** 
  - `productInfo` - Lista de objetos JSON con información de productos.
  - `stockList` - Lista de objetos JSON con información de stock.
- **Retorno:** Ninguno.

### `saveToJson(data)`
- **Descripción:** Guarda la información en un archivo JSON.
- **Parámetros:** `data` - Datos a ser guardados en formato JSON.
- **Retorno:** Ninguno.

### Ejecución Principal
- **Descripción:** Ejecuta el flujo principal del script, obteniendo los datos de los productos de Okto Shop, luego enriqueciendo esa información con datos de Vtex y finalmente guardando la información en un archivo JSON.
- **Parámetros:** Ninguno.

## Uso
1. Asegúrese de tener las credenciales necesarias para acceder a las APIs de Okto Shop y Vtex.
2. Configure las credenciales en las variables `oktoHeaders` y en el objeto de opciones `headers` dentro de la función `productVtexByEanListOkToShop`.
3. Ejecute el script usando Node.js.

## Ejemplo de Uso
```bash
node version2.js
```

## Limitaciones
- El script asume que todas las peticiones a las APIs serán exitosas y no maneja errores específicos de conexión o autenticación.
- Solo se guarda la información en un archivo JSON, pero se podría extender para guardar en múltiples formatos o en un sistema de almacenamiento en la nube.

Esta documentación proporciona una visión general del funcionamiento y la estructura del script `version2.js`. Para detalles específicos sobre cada función y su implementación, consulte el código fuente directamente.


# Documentación Técnica - updateData.js

El script `updateData.js` es una herramienta que carga datos desde un archivo JSON y los actualiza en la plataforma de comercio electrónico Vtex utilizando su API. Procesa cada elemento del JSON con un retraso de un segundo entre cada solicitud para evitar exceder los límites de la API.

## Requisitos
- Node.js instalado en el entorno de ejecución.
- Dependencias npm: fs, axios.

## Funciones Principales

### `cargarJson(ruta)`
- **Descripción:** Lee un archivo JSON desde la ruta especificada y procesa cada elemento con un retraso de un segundo entre cada solicitud.
- **Parámetros:** `ruta` - Ruta del archivo JSON a ser cargado.
- **Retorno:** Ninguno.

Claro, puedo incluir esa información. Aquí tienes la actualización:

## Uso
1. Asegúrese de haber ejecutado previamente el script `version2.js`, ya que este script genera el archivo JSON que `updateData.js` utilizará para actualizar los datos en la plataforma de Vtex.
2. Asegúrese de tener las credenciales necesarias para acceder a la API de Vtex.
3. Configure las credenciales en el objeto de opciones `headers` dentro de la función `axios.post`.
4. Ejecute el script utilizando Node.js y especifique la ruta del archivo JSON generado por `version2.js`.

## Ejemplo de Uso
```bash
node updateData.js
```

Esta secuencia de pasos garantiza que los datos actualizados generados por `version2.js` se utilicen correctamente en `updateData.js` para actualizar la información en la plataforma de Vtex.

## Limitaciones
- El script asume que todas las peticiones a la API de Vtex serán exitosas y no maneja errores específicos de conexión o autenticación.
- No se proporciona manejo de errores específicos para casos donde las solicitudes a la API de Vtex fallen debido a problemas de datos.

Esta documentación proporciona una visión general del funcionamiento y la estructura del script `updateData.js`. Para detalles específicos sobre su implementación, consulte el código fuente directamente.